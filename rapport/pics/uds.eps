%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 12.0.1%%For: (fred) (Curri)%%Title: (uds.eps)%%CreationDate: 6/01/09 9:16%%BoundingBox: 150 498 453 638%%HiResBoundingBox: 150.3936 498.627 452.8506 637.6694%%DocumentProcessColors: Cyan Magenta Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%CMYKCustomColor: 1 1 1 1 ([Rep\616rage])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 65537 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 298.5 420.3887 298.5 420.3887%AI3_TileBox: -112.0234 -163.2168 707.2988 1005.1055%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 595.276 841.89%AI5_RulerUnits: 4%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -655 862.8887 1 1908 1117 26 0 0 6 73 0 0%AI5_OpenViewLayers: 7%%PageOrigin:-978 -429.8975%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%AI7_Thumbnail: 128 60 8%%BeginData: 4952 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD57FFA9A97E5A2F3007A9FD75FF7E5A2F0D06FD04070D84FD71FF%AF5A5A0707070D070D070D070D0785FD6FFF7E300707060D0707060D0707%060D07075AFD6CFFA97E0D0D070D072F070D072F070D072F070D0784FD6A%FFAF530D0707070D070D070D070D070D070D070D070753FD69FF84070707%0D070D070D070D070D070D070D070D070D075AFD67FF842F06070707060D%0707060D0707060D0707060D070706072FFD66FF5A0D072F070D072F070D%072F070D072F070D070D070D070D0736FD65FF2F07070D070D070D070D07%0D070D070D070D0707072F2F5A7EA9A8FD64FF2F07070D070D070D070D07%0D070D070D070D0D5A7EAFFD69FFFD0407060D0707060D0707060D060707%5A84FD6CFF2F0D070D072F070D072F070D070D075A84FD6EFF2F07070D07%0D070D070D070D07072FA9FD6FFF5A07070D070D070D070D070D0736A8FD%70FFA807060D0707060D07070607077EFD72FF5A072F070D072F070D070D%0DAFFD72FFA90707070D070D070D070707FD74FF2FFD04070DFD0507FD74%FFAF5A2F5A535A2F5A535A2FA9FDFCFFFDECFF27FD4FFFA8A8FFA8FFFFA8%A8FFA8FFFFFFA8FFA8FFFFFFA8FFFD04A8FFFFA8A8A8FFFFFFA8A8A8FFFF%A8FFFFA8A8A8FFFFFF527DA8FD05FFA8A8A8FFFFFFA8A8A8FD07FF7EA9FF%FFA8AFA9AFFFFFA9AFA8FD05FFAFFFFFFFA98484FFFFFFA8AFAFFFFFFFA9%84A8FFFFFFA8FFAFAFA9FFA9AFA8FD05FF7E85FF27A8FF27A8FF52F8FFA8%52FF7D52FF7D27FF7D52FF7D27A852FFFF27525252FF7D527D52FFFFF8FF%7D7D275252FF5252A87DA8FFFFFF7D277D5252FFFF5252A852FD04FFA907%7E2FA9FF5A2F2F2F84FF2F2F300DFFFFFF0730FFFF7E2F7E5A84FF590D53%2FA8FF7E2F590D5AFFA80784FF07A9FF5A0D5A07A9FFA9075A2F7E52A8FF%52FFFF7D2752A8A8FF7D52FFFF27A87DA8FF5252A8A8FFFF27A8527DFF7D%27A8FFFFA827FFFFFF27FFFFFF7D52A8A8FD04FFA827FFFF277DFF527DA8%FD05FF5A077EFFA9FFFF840DFFA9FF0DA9A90DA8FFA83007AFFF7E0685A9%FFFF7E2FA907AFFF2F5AFF7E0DFFFF07FFFF2FA9FF2F5AFF0D7EFF2F5AFF%FFA927A8FF52A8FF52A827527DFF7D52FFFF525252FFFF7D277DA8FFFF52%2752FFFFFF7D2752FFFF27FFFFFF27FFFFFF525252FD05FF7D52FFFF527D%FF52277DFD06FF590D0784FFFF7E2FFFFFFF2F2F2F7EFFFF5A0D0D59FFA9%5A07077EFF590D532F7EFF0784FFFF07AFA80DA8FF07A9FF5A072F53FFA9%0D7EFF5A5A527DFF27FFFF7DA8FFF87DFF7D27FFFFFFF87DFFFF5252FFA8%A8FF27A827A8FFA8A8FF27FFFF27FFFFFF27A8FFFF5252FF7DFD04FFA827%FFA852A8FF27A8FFA8A8FFFFFF84AFFF0D2FFFFF8407FFFFFF07842F5AFF%FF2FA92F30FFA9A8FF075AFF5A2FFF0D5AFF5A0DFF5A30FFFF07A9A80DA9%FF2F5A5A30FFFF5A2FFF5A2FA852527DFFFF52A8FF7D7DFF7D52FFFFFF52%A8FFFF7D277D27A8FF52A8A827FF7D52527DFFA827FFFFFF27A8FFFFFD04%52A8FFFFFF7D525252A8FFFF52275252FD04FFA92F5A2FA9FFFF5A30A8FF%A9305AA92FA97E5AFFA82FFFA82F2F5AA8FF5A362F5AA8FFFF5A0D5AA8FF%FF7E2F2F59FFFF5A2FFF2F7EFFFF2F2F2F84FD47FFAFFDFCFFFDFCFFFD7A%FF2F0D070D070D070D065AFD75FF840D070D070D070D070D7EFD75FF3006%0D070D070D070707AFFD74FFA9070D070D070D070D0730FD75FFFD040706%0D070706075AFD74FF2F0D070D072F070D070D0DFD74FF2F07070D070D07%0D070D065AFD72FFAF0D0D070D070D070D070D072FA9FD71FF840707060D%0707060D070706077EFD70FFA85A070D072F070D072F070D070D2FFD6FFF%A92F07060D070D070D070D070D070707FD6EFF8436070D070D070D070D07%0D070D070D07FD6CFF7E5A07070607060D0707060D0707060D070706A9FD%68FFA97E5A0D0D070D070D072F070D072F070D072F070707AFFD63FFA884%5A5A2F2F0707060D070D070D070D070D070D070D070D07072FAFFD64FF84%0607070D070D070D070D070D070D070D070D070D070D070759FD66FF7E07%060D0707060D0707060D0707060D0707060D0707062F7EFD67FFA9070D07%0D072F070D072F070D072F070D072F0707077EFD69FFA807070D070D070D%070D070D070D070D0707060D59AFFD6BFF070D070D070D070D070D070D07%0D070D0D5AA8FD6CFFA80D0707060D0707060D07070607072F7EFD70FF0D%0D072F070D070D070D0D5A7EFD73FF2F06070607072F2F7E84FD76FF2F36%5A8484FDD9FFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade false putuserdict /_aicmykps true putuserdict /_forceToCMYK true putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI3_BeginRidercurrentpacking true setpackingsetpacking%AI3_EndRider%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Tracing Object) (Vectorisation) (Vectorisation.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Module externe Adobe Forme diffuse) (Forme diffuse.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Module externe Adobe Forme diffuse) (Forme diffuse.aip)%AI8_PluginGroupInfo(Adobe Path Blends) (Module externe D\216grad\216 de formes Adobe) (D\216grad\216s.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Module externe Adobe Forme de motif) (Forme artistique.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Module externe Adobe Forme de motif) (Forme artistique.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Module externe Forme artistique Adobe) (Forme artistique.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Module externe Forme artistique Adobe) (Forme artistique.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Module externe Forme calligraphique Adobe) (Forme calligraphique.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Halo.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Symbolisme Adobe) (Symbolisme.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Module externe Adobe Enveloppe) (Enveloppe et d\216formation.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Forme compos\216e Adobe) (Extension Pathfinder.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Module externe Peinture dynamique d'Adobe) (Live Paint.aip)%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 ([Rep\616rage]) 0 Xs([Rep\616rage])PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 50 Lb(Calque 1) Ln0 Au0 O0.898039 0.627451 0 0 0 0.368627 0.658824 Xa0 J 0 j 1 w 4 M []0 d0 XR294.5474 591.5435 m318.5986 591.5435 l329.1436 610.7476 374.3936 616.3896 v373.5625 628.3984 372.7939 637.6694 y309.9072 633.3643 294.5474 591.5435 VF288.1836 554.7671 m310.0254 554.7671 l307.2246 507.7598 229.041 498.627 v228.0874 510.7583 227.4077 519.8823 y279.77 524.7529 288.1836 554.7671 VF*u1 D1 O0.858823 0.85098 0.788235 1 0 0 0 Xa295.5635 568.5747 m295.5635 568.0796 295.3516 567.9375 294.6611 567.8315 C294.6611 567.584 L303.6523 567.584 l303.6699 568.5576 303.7402 569.5132 303.8291 570.4868 C303.4922 570.4868 l303.1738 568.876 302.5371 568.5747 301.0508 568.5747 C297.2983 568.5747 L297.2983 573.0352 L299.8115 573.0352 l300.4492 573.0352 300.8027 572.9819 300.9268 572.0088 C301.2803 572.0088 l301.2266 572.5215 301.1738 572.999 301.1738 573.5483 c301.1738 574.0615 301.2266 574.5386 301.2803 575.0518 C300.9268 575.0518 l300.8027 574.0791 300.4492 574.0259 299.8115 574.0259 C297.2983 574.0259 L297.2983 577.8135 L301.3516 577.8135 l302.1299 577.8135 302.7314 577.6016 302.9443 576.1855 C303.2979 576.1855 l303.2275 577.0527 303.1914 577.9375 303.1914 578.8052 C294.6611 578.8052 L294.6611 578.5571 l295.3516 578.4507 295.5635 578.3091 295.5635 577.8135 c295.5635 568.5747 Lf0 D282.0425 577.8135 m282.9277 577.8135 l287.7764 577.8135 288.75 574.9468 288.75 572.9287 c288.75 570.2036 286.3257 568.5747 284.52 568.5747 C282.0425 568.5747 l282.0425 577.8135 Lf1 D279.4058 578.8052 m279.4058 578.5571 l280.0957 578.4507 280.3081 578.3091 280.3081 577.8135 C280.3081 568.5747 l280.3081 568.0796 280.0957 567.9375 279.4058 567.8315 C279.4058 567.584 L284.0952 567.584 l287.5996 567.584 290.4844 569.8848 290.4844 573.2651 c290.4844 576.6099 288.0952 578.8052 283.5996 578.8052 c279.4058 578.8052 Lf260.3354 568.5747 m260.3354 568.0796 260.123 567.9375 259.4326 567.8315 C259.4326 567.584 L268.4238 567.584 l268.4414 568.5576 268.5122 569.5132 268.6006 570.4868 C268.2642 570.4868 l267.9458 568.876 267.3086 568.5747 265.8218 568.5747 C262.0698 568.5747 L262.0698 573.0352 L264.583 573.0352 l265.2207 573.0352 265.5742 572.9819 265.6982 572.0088 C266.0518 572.0088 l265.999 572.5215 265.9463 572.999 265.9463 573.5483 c265.9463 574.0615 265.999 574.5386 266.0518 575.0518 C265.6982 575.0518 l265.5742 574.0791 265.2207 574.0259 264.583 574.0259 C262.0698 574.0259 L262.0698 577.8135 L266.123 577.8135 l266.9019 577.8135 267.5034 577.6016 267.7158 576.1855 C268.0698 576.1855 l267.999 577.0527 267.9639 577.9375 267.9639 578.8052 C259.4326 578.8052 L259.4326 578.5571 l260.123 578.4507 260.3354 578.3091 260.3354 577.8135 c260.3354 568.5747 Lf262.5303 580.0259 m263.3442 580.0259 L265.8574 581.6011 l266.2114 581.8135 266.583 582.1318 266.583 582.4507 c266.583 582.6982 266.3179 583.1406 265.8574 583.1406 c265.645 583.1406 265.4326 583.0352 264.813 582.3975 c262.5303 580.0259 Lf250.2119 568.752 m250.2119 568.1499 250 567.8315 249.0967 567.7256 C249.0967 567.4775 l249.7871 567.4775 250.5483 567.584 251.0791 567.584 c251.6104 567.584 252.3711 567.4775 253.0615 567.4775 C253.0615 567.7256 l252.1592 567.8315 251.9463 568.1499 251.9463 568.752 C251.9463 577.8135 L253.5747 577.8135 l254.5654 577.8135 255.0615 577.4951 255.3799 575.9023 C255.7339 575.9023 l255.6104 576.876 255.5039 577.8315 255.4507 578.8052 C246.7075 578.8052 l246.6548 577.8315 246.5483 576.876 246.4248 575.9023 C246.7788 575.9023 l247.0972 577.4951 247.5928 577.8135 248.584 577.8135 C250.2119 577.8135 l250.2119 568.752 Lf239.4512 567.4775 m239.8228 567.4775 240.5483 567.584 241.2212 567.584 c241.8936 567.584 242.6191 567.4775 242.9907 567.4775 C242.9907 567.7256 l242.3008 567.8315 242.0884 567.9731 242.0884 568.4692 C242.0884 577.9199 l242.0884 578.4155 242.3008 578.5571 242.9907 578.6631 C242.9907 578.9106 l242.6191 578.9106 241.8936 578.8052 241.2212 578.8052 c240.5483 578.8052 239.8228 578.9106 239.4512 578.9106 C239.4512 578.6631 l240.1416 578.5571 240.354 578.4155 240.354 577.9199 C240.354 568.4692 l240.354 567.9731 240.1416 567.8315 239.4512 567.7256 c239.4512 567.4775 Lf227.3989 570.876 m227.4692 569.9556 227.5049 569.0527 227.5049 568.1328 c228.5137 567.5127 229.6289 567.3008 230.7261 567.3008 c234.0181 567.3008 235.5044 568.9639 235.5044 570.9287 c235.5044 573.2832 233.8232 573.7251 231.6108 574.168 c229.4341 574.6099 228.7437 574.8052 228.7437 576.0786 c228.7437 577.1943 229.7173 578.0967 231.6289 578.0967 c232.8677 578.0967 234.3188 577.5835 234.5669 576.0439 C234.9204 576.0439 l234.8672 576.8579 234.832 577.6899 234.8501 578.5039 c234.2124 578.8936 232.6553 579.0879 231.9116 579.0879 c229.062 579.0879 227.2222 577.5659 227.2222 575.814 c227.2222 573.6548 228.8677 573.106 231.9116 572.5044 c233.1333 572.2563 233.9824 571.9731 233.9824 570.5571 c233.9824 568.9819 232.5132 568.2915 231.2212 568.2915 c229.4868 568.2915 228.1777 569.1768 227.7529 570.876 c227.3989 570.876 Lf215.0103 568.4692 m215.0103 567.9731 214.7974 567.8315 214.1074 567.7256 C214.1074 567.4775 l214.479 567.4775 215.2046 567.584 215.8774 567.584 c216.5498 567.584 217.2754 567.4775 217.647 567.4775 C217.647 567.7256 l216.9565 567.8315 216.7446 567.9731 216.7446 568.4692 C216.7446 577.8135 L217.7002 577.8135 l219.187 577.8135 220.6914 577.5659 220.6914 575.8843 c220.6914 574.3271 219.3994 573.5664 217.5586 573.5664 c217.417 573.5664 217.2222 573.4951 217.2222 573.3887 c217.2222 573.3184 217.3638 573.1587 217.5767 572.876 C219.8594 569.814 l221.293 567.814 221.4697 567.5308 221.6646 567.4775 c222.1069 567.4775 222.5674 567.584 223.0273 567.584 c223.3281 567.584 223.6289 567.4775 223.9478 567.4775 C223.9478 567.7256 l223.4346 567.7788 222.9922 568.2212 222.4609 568.8936 C219.2046 573.106 l220.9033 573.2476 222.4258 574.3091 222.4258 576.1143 c222.4258 577.5835 221.5938 578.8052 219.2397 578.8052 C214.1074 578.8052 L214.1074 578.5571 l214.7974 578.4507 215.0103 578.3091 215.0103 577.8135 c215.0103 568.4692 Lf201.7188 568.5747 m201.7188 568.0796 201.5063 567.9375 200.8159 567.8315 C200.8159 567.584 L209.8066 567.584 l209.8247 568.5576 209.895 569.5132 209.9839 570.4868 C209.6475 570.4868 l209.3286 568.876 208.6914 568.5747 207.2051 568.5747 C203.4526 568.5747 L203.4526 573.0352 L205.9663 573.0352 l206.6035 573.0352 206.9575 572.9819 207.0811 572.0088 C207.4355 572.0088 l207.3823 572.5215 207.3291 572.999 207.3291 573.5483 c207.3291 574.0615 207.3823 574.5386 207.4355 575.0518 C207.0811 575.0518 l206.9575 574.0791 206.6035 574.0259 205.9663 574.0259 C203.4526 574.0259 L203.4526 577.8135 L207.5059 577.8135 l208.2847 577.8135 208.8862 577.6016 209.0986 576.1855 C209.4531 576.1855 l209.3818 577.0527 209.3467 577.9375 209.3467 578.8052 C200.8159 578.8052 L200.8159 578.5571 l201.5063 578.4507 201.7188 578.3091 201.7188 577.8135 c201.7188 568.5747 Lf186.6221 578.6631 m187.4185 578.5923 187.5596 578.2563 187.7192 577.8667 C191.6128 567.4775 L192.7983 567.4775 L196.2676 577.707 l196.4443 578.2383 196.7632 578.5923 197.3296 578.6631 C197.3296 578.9106 l196.8867 578.9106 196.4443 578.8052 196.0024 578.8052 c195.4712 578.8052 194.9224 578.9106 194.3916 578.9106 C194.3916 578.6631 l194.7456 578.5923 195.2236 578.4863 195.2236 578.1318 c195.2236 577.9199 195.1353 577.5835 194.9937 577.1411 C192.4624 569.5303 L192.4272 569.5303 L189.5952 577.3887 l189.5249 577.5835 189.4004 577.9551 189.4004 578.1499 c189.4004 578.4863 189.6304 578.6455 190.3032 578.6631 C190.3032 578.9106 l189.772 578.9106 189.2769 578.8052 188.7632 578.8052 c188.0557 578.8052 187.3296 578.9106 186.6221 578.9106 c186.6221 578.6631 Lf179.8613 567.4775 m180.2329 567.4775 180.9585 567.584 181.6309 567.584 c182.3037 567.584 183.0293 567.4775 183.4009 567.4775 C183.4009 567.7256 l182.7104 567.8315 182.4985 567.9731 182.4985 568.4692 C182.4985 577.9199 l182.4985 578.4155 182.7104 578.5571 183.4009 578.6631 C183.4009 578.9106 l183.0293 578.9106 182.3037 578.8052 181.6309 578.8052 c180.9585 578.8052 180.2329 578.9106 179.8613 578.9106 C179.8613 578.6631 l180.5513 578.5571 180.7637 578.4155 180.7637 577.9199 C180.7637 568.4692 l180.7637 567.9731 180.5513 567.8315 179.8613 567.7256 c179.8613 567.4775 Lf165.7734 568.4692 m165.7734 567.9731 165.561 567.8315 164.8711 567.7256 C164.8711 567.4775 l165.4551 567.4775 166.0386 567.584 166.623 567.584 c167.1187 567.584 167.6143 567.4775 168.1094 567.4775 C168.1094 567.7256 l167.1538 567.8848 166.8706 568.1499 166.8706 569.3364 C166.8706 576.9644 L166.9058 576.9644 L173.791 567.4775 L174.835 567.4775 L174.835 577.9199 l174.835 578.4155 175.0474 578.5571 175.7378 578.6631 C175.7378 578.9106 l175.1538 578.9106 174.5698 578.8052 173.9854 578.8052 c173.4897 578.8052 172.9946 578.9106 172.499 578.9106 C172.499 578.6631 l173.4546 578.5039 173.7378 578.2383 173.7378 577.0527 C173.7378 570.6455 L173.7026 570.6455 L167.6846 578.9106 l167.2422 578.9106 166.8535 578.8052 166.375 578.8052 c165.8799 578.8052 165.3662 578.9106 164.8711 578.9106 C164.8711 578.6631 l165.561 578.5571 165.7734 578.4155 165.7734 577.9199 c165.7734 568.4692 Lf150.3936 578.6631 m151.1191 578.5923 151.2256 578.5391 151.2256 577.7603 C151.2256 571.3184 l151.2256 568.5747 152.8184 567.3008 155.5259 567.3008 c158.252 567.3008 159.8442 568.5747 159.8442 571.3184 C159.8442 577.7603 l159.8442 578.5391 159.9507 578.5923 160.6763 578.6631 C160.6763 578.9106 l160.1279 578.9106 159.5791 578.8052 159.1016 578.8052 c158.1987 578.8052 157.6318 578.9106 157.0835 578.9106 C157.0835 578.6631 l157.4731 578.6455 158.1104 578.5391 158.1104 577.9019 C158.1104 570.9819 l158.1104 569.1064 156.9775 568.186 155.5259 568.186 c154.0928 568.186 152.96 569.1064 152.96 570.9819 C152.96 577.9019 l152.96 578.5391 153.5967 578.6455 153.9863 578.6631 C153.9863 578.9106 l153.438 578.9106 152.8716 578.8052 151.9688 578.8052 c151.4907 578.8052 150.9424 578.9106 150.3936 578.9106 c150.3936 578.6631 Lf*U*u0 O0.898039 0.627451 0 0 0 0.368627 0.658824 Xa449.3994 570.292 m449.3994 569.4775 448.709 568.8936 447.4521 568.8936 c445.3994 568.8936 444.1602 571.2295 444.1602 573.4248 c444.1602 575.7075 445.3643 577.6367 447.8232 577.6367 c449.293 577.6367 450.7793 576.8579 451.0098 575.2827 C451.4521 575.2827 l451.3809 576.5039 451.3457 577.5659 451.3457 578.4331 c450.3721 578.9819 449.1514 579.1938 447.9297 579.1938 c444.1074 579.1938 441.541 576.8228 441.541 572.9819 c441.541 569.7964 443.665 567.1943 446.9922 567.1943 c448.1953 567.1943 449.3633 567.5659 450.4785 568.6104 C450.8857 567.4775 L451.9121 567.4775 L451.9121 571.4595 l451.9121 572.2563 452.2305 572.416 452.8506 572.4331 C452.8506 572.8403 l452.0537 572.7876 451.2754 572.7344 450.4785 572.7344 c449.7354 572.7344 449.0098 572.7876 448.2842 572.8403 C448.2842 572.3979 l449.0801 572.3799 449.3994 572.3447 449.3994 571.6372 c449.3994 570.292 Lf430.6563 577.2471 m431.8242 577.2471 l433.417 577.2471 434.4795 576.6812 434.4795 575.2651 c434.4795 573.6719 433.4707 573.3184 430.8867 572.9819 C430.8867 572.9463 l432.0547 571.3359 433.417 569.4248 434.4609 567.4775 c435.0811 567.5308 435.6826 567.584 436.2852 567.584 c436.8857 567.584 437.5059 567.5308 438.1074 567.4775 C438.1074 567.8672 l437.6475 567.8315 437.3291 568.0615 436.9746 568.5576 C434.0898 572.5396 l436.5146 573.1768 437.0986 574.4155 437.0986 575.7959 c437.0986 577.8486 435.541 578.8047 433.5059 578.8047 C427.2227 578.8047 L427.2227 578.4688 l427.8252 578.4507 428.0371 578.2207 428.0371 577.7251 C428.0371 569.0703 l428.0371 568.2393 427.9131 567.9375 427.2227 567.814 C427.2227 567.4775 l428.002 567.5308 428.6924 567.584 429.3467 567.584 c430.001 567.584 430.6914 567.5308 431.8066 567.4775 C431.8066 567.814 l430.7803 568.0083 430.6563 568.2393 430.6563 568.876 c430.6563 577.2471 Lf412.6572 571.2656 m412.6572 568.2393 414.3564 567.1943 417.542 567.1943 c420.7285 567.1943 422.4268 568.2393 422.4268 571.5127 C422.4268 577.8315 l422.4268 578.3267 422.6396 578.5571 423.2412 578.5747 C423.2412 578.9106 l422.6748 578.8574 421.9492 578.8047 421.2061 578.8047 c420.2852 578.8047 419.5596 578.8574 418.8516 578.9106 C418.8516 578.5747 l419.6133 578.5391 419.8076 578.3975 419.8076 577.707 C419.8076 571.1411 l419.8076 569.1768 418.9756 568.752 417.542 568.752 c416.1084 568.752 415.2764 569.1416 415.2764 571.1411 C415.2764 577.707 l415.2764 578.3975 415.4717 578.5391 416.2324 578.5747 C416.2324 578.9106 l415.5244 578.8574 414.7988 578.8047 413.8789 578.8047 c413.1357 578.8047 412.4102 578.8574 411.8438 578.9106 C411.8438 578.5747 l412.4453 578.5571 412.6572 578.3267 412.6572 577.8315 c412.6572 571.2656 Lf408.0566 573.1768 m408.0566 576.3271 405.8789 579.1938 402.2686 579.1938 c399.0117 579.1938 396.5166 576.7515 396.5166 573.3887 c396.5166 570.1504 398.6582 567.1943 402.1797 567.1943 c405.3477 567.1943 408.0566 569.4419 408.0566 573.1768 CF0 D405.4365 572.4331 m405.4365 570.5034 404.3926 568.8936 402.5879 568.8936 c400.0566 568.8936 399.1367 571.9199 399.1367 573.9907 c399.1367 575.4067 399.791 577.4951 401.9854 577.4951 c404.6406 577.4951 405.4365 574.4863 405.4365 572.4331 CF1 D383.2422 568.6631 m383.2422 568.168 383.0313 567.9375 382.4287 567.9199 C382.4287 567.584 L388.8359 567.584 l389.9336 567.584 392.7998 568.2212 392.7998 570.8228 c392.7998 572.646 391.2607 573.4248 389.6143 573.4775 C389.6143 573.5127 l390.9063 573.8315 391.9863 574.7339 391.9863 576.0972 c391.9863 578.2031 389.9688 578.8047 388.8359 578.8047 C382.4287 578.8047 L382.4287 578.4688 l383.0313 578.4507 383.2422 578.2207 383.2422 577.7251 c383.2422 568.6631 Lf0 D385.8623 577.3535 m387.3145 577.3535 l388.7295 577.3535 389.4727 576.8047 389.4727 575.8843 c389.4727 575.0518 388.9766 574.0791 387.1016 574.0791 C385.8623 574.0791 l385.8623 577.3535 Lf385.8623 572.6279 m387.5254 572.6279 l389.543 572.6279 390.1807 571.7256 390.1807 570.8936 c390.1807 569.9902 389.7383 569.0347 387.4023 569.0347 C385.8623 569.0347 l385.8623 572.6279 Lf1 D369.2617 571.4775 m369.3496 570.4507 369.4033 569.23 369.4033 567.8315 c370.5889 567.4072 371.9512 567.1943 373.2441 567.1943 c376.1289 567.1943 378.4824 568.4331 378.4824 570.7695 c378.4824 573.0698 376.8184 573.7251 375.0313 574.2383 C373.1729 574.769 l372.4473 574.9819 371.5977 575.2651 371.5977 576.2383 c371.5977 577.46 373.084 577.7432 373.9688 577.7432 c375.5625 577.7432 376.9951 576.9814 377.3672 575.3535 C377.7031 575.3535 l377.6328 576.2739 377.5625 577.3535 377.5625 578.6274 c376.5352 578.999 375.3848 579.1938 374.2695 579.1938 c371.6328 579.1938 368.9785 578.3623 368.9785 575.6191 c368.9785 573.5303 370.7832 572.7695 372.5879 572.2383 C373.8457 571.8672 l374.6592 571.6191 375.7559 571.3359 375.7559 570.2739 c375.7559 568.9468 374.252 568.646 373.208 568.646 c371.3145 568.646 369.9512 569.5479 369.5977 571.4775 c369.2617 571.4775 Lf0 D358.9258 572.4331 m359.3857 573.6899 359.9521 575.0879 360.3594 576.5039 C360.3945 576.5039 l360.748 574.7168 361.0498 573.583 361.4219 572.4331 c358.9258 572.4331 Lf1 D354.6426 567.4775 m355.2617 567.5308 355.8643 567.584 356.4834 567.584 c357.085 567.584 357.7041 567.5308 358.3066 567.4775 C358.3066 567.814 l357.7227 567.8496 357.4746 568.0615 357.4746 568.3799 c357.4746 568.5576 357.5273 568.752 357.6152 569 C358.3945 571.0884 L361.8457 571.0884 L362.4121 569.3716 l362.5 569.1416 362.5889 568.7344 362.5889 568.4863 c362.5889 568.0796 362.3594 567.9375 361.7041 567.814 C361.7041 567.4775 l362.4648 567.5308 363.2266 567.584 363.9873 567.584 c364.7305 567.584 365.4922 567.5308 366.2354 567.4775 C366.2354 567.814 l365.7041 567.9556 365.4385 568.186 365.1738 568.9639 C361.917 578.9106 l361.3682 578.8574 360.8018 578.8047 360.2529 578.8047 c359.7051 578.8047 359.1563 578.8574 358.5898 578.9106 C358.5898 578.5747 l359.0674 578.5747 359.2617 578.2915 359.2617 578.1147 c359.2617 577.9375 359.1377 577.6899 359.0322 577.4243 C355.5625 568.6279 l355.3857 568.168 355.1563 567.8848 354.6426 567.814 c354.6426 567.4775 Lf344.9971 577.2471 m346.165 577.2471 l347.7578 577.2471 348.8203 576.6812 348.8203 575.2651 c348.8203 573.6719 347.8105 573.3184 345.2266 572.9819 C345.2266 572.9463 l346.3955 571.3359 347.7578 569.4248 348.8018 567.4775 c349.4219 567.5308 350.0234 567.584 350.625 567.584 c351.2266 567.584 351.8457 567.5308 352.4482 567.4775 C352.4482 567.8672 l351.9883 567.8315 351.6699 568.0615 351.3154 568.5576 C348.4307 572.5396 l350.8555 573.1768 351.4395 574.4155 351.4395 575.7959 c351.4395 577.8486 349.8818 578.8047 347.8457 578.8047 C341.5635 578.8047 L341.5635 578.4688 l342.166 578.4507 342.377 578.2207 342.377 577.7251 C342.377 569.0703 l342.377 568.2393 342.2539 567.9375 341.5635 567.814 C341.5635 567.4775 l342.3418 567.5308 343.0332 567.584 343.6875 567.584 c344.3418 567.584 345.0332 567.5308 346.1475 567.4775 C346.1475 567.814 l345.1211 568.0083 344.9971 568.2393 344.9971 568.876 c344.9971 577.2471 Lf334.166 577.2471 m335.9355 577.2471 l336.8555 577.2471 337.2451 576.6099 337.4219 575.3359 C337.7578 575.3359 l337.7227 576.0786 337.6523 576.8228 337.6523 577.5659 C337.6523 578.8047 L328.0596 578.8047 L328.0596 577.5659 l328.0596 576.8228 327.9883 576.0786 327.9531 575.3359 C328.29 575.3359 l328.4668 576.6099 328.8564 577.2471 329.7764 577.2471 C331.5469 577.2471 L331.5469 568.8936 l331.5469 568.0439 330.9268 567.814 330.3779 567.814 C330.3779 567.4775 l331.2275 567.5308 332.0771 567.584 332.8555 567.584 c333.6348 567.584 334.4844 567.5308 335.334 567.4775 C335.334 567.814 l334.7852 567.814 334.166 568.0439 334.166 568.8936 c334.166 577.2471 Lf315.0859 571.4775 m315.1758 570.4507 315.2285 569.23 315.2285 567.8315 c316.4141 567.4072 317.7773 567.1943 319.0693 567.1943 c321.9531 567.1943 324.3076 568.4331 324.3076 570.7695 c324.3076 573.0698 322.6445 573.7251 320.8564 574.2383 C318.998 574.769 l318.2725 574.9819 317.4238 575.2651 317.4238 576.2383 c317.4238 577.46 318.9102 577.7432 319.7949 577.7432 c321.3867 577.7432 322.8203 576.9814 323.1934 575.3535 C323.5293 575.3535 l323.458 576.2739 323.3877 577.3535 323.3877 578.6274 c322.3613 578.999 321.2109 579.1938 320.0957 579.1938 c317.459 579.1938 314.8047 578.3623 314.8047 575.6191 c314.8047 573.5303 316.6094 572.7695 318.4141 572.2383 C319.6709 571.8672 l320.4844 571.6191 321.582 571.3359 321.582 570.2739 c321.582 568.9468 320.0781 568.646 319.0332 568.646 c317.1406 568.646 315.7773 569.5479 315.4229 571.4775 c315.0859 571.4775 Lf*UULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF